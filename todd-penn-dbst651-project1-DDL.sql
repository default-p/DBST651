SET ECHO ON;
SET SERVEROUTPUT ON;
SET LINESIZE 150;
SET PAGESIZE 30;

DROP TABLE TODO_USER CASCADE CONSTRAINTS PURGE;
DROP TABLE TODO_COMMENT CASCADE CONSTRAINTS PURGE;
DROP TABLE TODO CASCADE CONSTRAINTS PURGE;
DROP TABLE TODO_CATEGORY CASCADE CONSTRAINTS PURGE;
DROP TABLE CATEGORY CASCADE CONSTRAINTS PURGE;

DROP SEQUENCE TODO_USER_ID_SEQ;
DROP SEQUENCE TODO_ID_SEQ;
DROP SEQUENCE TODO_COMMENT_ID_SEQ;
DROP SEQUENCE TODO_CATEGORY_ID_SEQ;
DROP SEQUENCE CATEGORY_ID_SEQ;

CREATE TABLE TODO_USER (
  ID NUMBER(10),
  NAME VARCHAR2(50),
  EMAIL VARCHAR2(150),
  CREATED_AT TIMESTAMP,
  UPDATED_AT TIMESTAMP,
  CONSTRAINT TODO_USER_PK PRIMARY KEY (ID)  
);

CREATE TABLE TODO (
  ID NUMBER(10),
  TITLE VARCHAR2(150),
  DESCRIPTION VARCHAR2(300),
  DEADLINE TIMESTAMP,
  NOTIFICATIONS TIMESTAMP,
  CREATED_AT TIMESTAMP,
  UPDATED_AT TIMESTAMP,
  USER_ID NUMBER(10),  
  CONSTRAINT TODO_PK PRIMARY KEY (ID),
  CONSTRAINT USER_ID_TODO_FK FOREIGN KEY (USER_ID) REFERENCES TODO_USER (ID)
);

CREATE TABLE TODO_COMMENT (
  ID NUMBER(10),
  BODY VARCHAR2(300),
  CREATED_AT TIMESTAMP,
  UPDATED_AT TIMESTAMP,
  USER_ID NUMBER(10),
  TODO_ID NUMBER(10),
  CONSTRAINT TODO_COMMENT_PK PRIMARY KEY (ID),
  CONSTRAINT USER_ID_TODO_COMMENT_FK FOREIGN KEY (USER_ID) REFERENCES TODO_USER (ID),
  CONSTRAINT TODO_ID_TODO_COMMENT_FK FOREIGN KEY (TODO_ID) REFERENCES TODO (ID)    
);

CREATE TABLE CATEGORY (
  ID NUMBER(10),
  NAME VARCHAR2(300),
  PRIORITY NUMBER(10),
  COLOR VARCHAR2(50),  
  CREATED_AT TIMESTAMP,
  UPDATED_AT TIMESTAMP,
  CONSTRAINT CATEGORY_PK PRIMARY KEY (ID)  
);


CREATE TABLE TODO_CATEGORY (
  ID NUMBER(10),
  IS_PLANNED CHAR(1),
  CATEGORY_ID NUMBER(10),
  CREATED_AT TIMESTAMP,
  UPDATED_AT TIMESTAMP,
  CONSTRAINT TODO_CATEGORY_CATEGORY_ID_FK FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORY (ID)
);


DESCRIBE TODO_USER;
DESCRIBE TODO_COMMENT;
DESCRIBE TODO;
DESCRIBE CATEGORY;
DESCRIBE TODO_CATEGORY;

CREATE INDEX TODO_USER_NAME_FK_IDX ON TODO_USER
 (ID,NAME);
 
CREATE INDEX TODO_COMMENT_TEXT_FK_IDX ON TODO_COMMENT
 (TODO_ID,USER_ID,BODY);
 
CREATE INDEX TODO_TITLE_FK_IDX ON TODO
 (ID,USER_ID,TITLE);
 
CREATE INDEX TODO_SUSPENSE_FK_IDX ON TODO
 (ID,USER_ID,TITLE,DEADLINE);
 
CREATE INDEX TODO_DETAILS_FK_IDX ON TODO
 (ID,USER_ID,TITLE,DESCRIPTION,DEADLINE);
 
CREATE OR REPLACE VIEW VIRTUAL_TODO_CATEGORIES AS
SELECT 
  C.ID, 
  C.NAME, 
  C.PRIORITY, 
  C.COLOR, 
  TC.IS_PLANNED
FROM CATEGORY C INNER JOIN TODO_CATEGORY TC
ON C.ID=TC.CATEGORY_ID;
      
CREATE OR REPLACE VIEW VIRTUAL_TODO_ITEMS AS
SELECT 
  T.ID, 
  T.TITLE, 
  T.DESCRIPTION, 
  T.DEADLINE, 
  T.NOTIFICATIONS, 
  T.USER_ID, 
  U.NAME
FROM TODO T INNER JOIN TODO_USER U
ON T.USER_ID=U.ID;

CREATE OR REPLACE VIEW VIEW_TODO_ITEMS AS
SELECT 
  ID, 
  TITLE, 
  DESCRIPTION, 
  DEADLINE, 
  NOTIFICATIONS, 
  USER_ID 
FROM TODO;

CREATE OR REPLACE VIEW VIEW_TODO_COMMENTS AS
SELECT 
  ID, 
  BODY, 
  USER_ID, 
  TODO_ID
FROM TODO_COMMENT;
      
DESCRIBE VIRTUAL_TODO_CATEGORIES;
DESCRIBE VIRTUAL_TODO_ITEMS;
DESCRIBE VIEW_TODO_ITEMS;
DESCRIBE VIEW_TODO_COMMENTS;

CREATE SEQUENCE TODO_USER_ID_SEQ
 INCREMENT BY 1
 START WITH 1000
/

CREATE SEQUENCE TODO_ID_SEQ
 INCREMENT BY 1
 START WITH 1
/

CREATE SEQUENCE TODO_COMMENT_ID_SEQ
 INCREMENT BY 1
 START WITH 100
/

CREATE SEQUENCE CATEGORY_ID_SEQ
 INCREMENT BY 10
 START WITH 50
/

CREATE SEQUENCE TODO_CATEGORY_ID_SEQ
 INCREMENT BY 1
 START WITH 1000
/

CREATE OR REPLACE TRIGGER TODO_USER_ID_TRIGGER
BEFORE INSERT OR UPDATE ON TODO_USER 
FOR EACH ROW
WHEN (NEW.ID IS NULL)
BEGIN
  SELECT TODO_USER_ID_SEQ.NEXTVAL
  INTO   :NEW.ID
  FROM   DUAL;
  
  IF INSERTING THEN
    IF :NEW.CREATED_AT IS NULL THEN :NEW.CREATED_AT := SYSTIMESTAMP; END IF;
  END IF;
  
  IF INSERTING OR UPDATING THEN
    IF :NEW.UPDATED_AT IS NULL THEN :NEW.UPDATED_AT := SYSTIMESTAMP; END IF;
  END IF;  
END;
/

CREATE OR REPLACE TRIGGER TODO_ID_TRIGGER
BEFORE INSERT OR UPDATE ON TODO 
FOR EACH ROW
WHEN (NEW.ID IS NULL)
BEGIN
  SELECT TODO_ID_SEQ.NEXTVAL
  INTO   :NEW.ID
  FROM   DUAL;
  
  IF INSERTING THEN
    IF :NEW.CREATED_AT IS NULL THEN :NEW.CREATED_AT := SYSTIMESTAMP; END IF;
  END IF;
  
  IF INSERTING OR UPDATING THEN
    IF :NEW.UPDATED_AT IS NULL THEN :NEW.UPDATED_AT := SYSTIMESTAMP; END IF;
  END IF;  
END;
/

CREATE OR REPLACE TRIGGER TODO_COMMENT_ID_TRIGGER
BEFORE INSERT OR UPDATE ON TODO_COMMENT 
FOR EACH ROW
WHEN (NEW.ID IS NULL)
BEGIN
  SELECT TODO_COMMENT_ID_SEQ.NEXTVAL
  INTO   :NEW.ID
  FROM   DUAL;
  
  IF INSERTING THEN
    IF :NEW.CREATED_AT IS NULL THEN :NEW.CREATED_AT := SYSTIMESTAMP; END IF;
  END IF;
  
  IF INSERTING OR UPDATING THEN
    IF :NEW.UPDATED_AT IS NULL THEN :NEW.UPDATED_AT := SYSTIMESTAMP; END IF;
  END IF;  
END;
/

CREATE OR REPLACE TRIGGER CATEGORY_ID_TRIGGER
BEFORE INSERT OR UPDATE ON CATEGORY
FOR EACH ROW
WHEN (NEW.ID IS NULL)
BEGIN
  SELECT CATEGORY_ID_SEQ.NEXTVAL
  INTO   :NEW.ID
  FROM   DUAL;
  
  IF INSERTING THEN
    IF :NEW.CREATED_AT IS NULL THEN :NEW.CREATED_AT := SYSTIMESTAMP; END IF;
  END IF;
  
  IF INSERTING OR UPDATING THEN
    IF :NEW.UPDATED_AT IS NULL THEN :NEW.UPDATED_AT := SYSTIMESTAMP; END IF;
  END IF;
END;
/

CREATE OR REPLACE TRIGGER TODO_CATEGORY_ID_TRIGGER
BEFORE INSERT OR UPDATE ON TODO_CATEGORY
FOR EACH ROW
WHEN (NEW.ID IS NULL)
BEGIN
  SELECT TODO_CATEGORY_ID_SEQ.NEXTVAL
  INTO   :NEW.ID
  FROM   DUAL;
  
  IF INSERTING THEN
    IF :NEW.CREATED_AT IS NULL THEN :NEW.CREATED_AT := SYSTIMESTAMP; END IF;
  END IF;
  
  IF INSERTING OR UPDATING THEN
    IF :NEW.UPDATED_AT IS NULL THEN :NEW.UPDATED_AT := SYSTIMESTAMP; END IF;
  END IF;  
END;
/

