SQL> SET SERVEROUTPUT ON;
SQL> SET LINESIZE 150;
SQL> SET PAGESIZE 30;
SQL> 
SQL> DROP TABLE TODO_USER CASCADE CONSTRAINTS PURGE;

Table TODO_USER dropped.

SQL> DROP TABLE TODO_COMMENT CASCADE CONSTRAINTS PURGE;

Table TODO_COMMENT dropped.

SQL> DROP TABLE TODO CASCADE CONSTRAINTS PURGE;

Table TODO dropped.

SQL> DROP TABLE TODO_CATEGORY CASCADE CONSTRAINTS PURGE;

Table TODO_CATEGORY dropped.

SQL> DROP TABLE CATEGORY CASCADE CONSTRAINTS PURGE;

Table CATEGORY dropped.

SQL> 
SQL> DROP SEQUENCE TODO_USER_ID_SEQ;

Sequence TODO_USER_ID_SEQ dropped.

SQL> DROP SEQUENCE TODO_ID_SEQ;

Sequence TODO_ID_SEQ dropped.

SQL> DROP SEQUENCE TODO_COMMENT_ID_SEQ;

Sequence TODO_COMMENT_ID_SEQ dropped.

SQL> DROP SEQUENCE TODO_CATEGORY_ID_SEQ;

Sequence TODO_CATEGORY_ID_SEQ dropped.

SQL> DROP SEQUENCE CATEGORY_ID_SEQ;

Sequence CATEGORY_ID_SEQ dropped.

SQL> 
SQL> CREATE TABLE TODO_USER (
  2    ID NUMBER(10),
  3    NAME VARCHAR2(50),
  4    EMAIL VARCHAR2(150),
  5    CREATED_AT TIMESTAMP,
  6    UPDATED_AT TIMESTAMP,
  7    CONSTRAINT TODO_USER_PK PRIMARY KEY (ID)  
  8  );

Table TODO_USER created.

SQL> 
SQL> CREATE TABLE TODO (
  2    ID NUMBER(10),
  3    TITLE VARCHAR2(150),
  4    DESCRIPTION VARCHAR2(300),
  5    DEADLINE TIMESTAMP,
  6    NOTIFICATIONS TIMESTAMP,
  7    CREATED_AT TIMESTAMP,
  8    UPDATED_AT TIMESTAMP,
  9    USER_ID NUMBER(10),  
 10    CONSTRAINT TODO_PK PRIMARY KEY (ID),
 11    CONSTRAINT USER_ID_TODO_FK FOREIGN KEY (USER_ID) REFERENCES TODO_USER (ID)
 12  );

Table TODO created.

SQL> 
SQL> CREATE TABLE TODO_COMMENT (
  2    ID NUMBER(10),
  3    BODY VARCHAR2(300),
  4    CREATED_AT TIMESTAMP,
  5    UPDATED_AT TIMESTAMP,
  6    USER_ID NUMBER(10),
  7    TODO_ID NUMBER(10),
  8    CONSTRAINT TODO_COMMENT_PK PRIMARY KEY (ID),
  9    CONSTRAINT USER_ID_TODO_COMMENT_FK FOREIGN KEY (USER_ID) REFERENCES TODO_USER (ID),
 10    CONSTRAINT TODO_ID_TODO_COMMENT_FK FOREIGN KEY (TODO_ID) REFERENCES TODO (ID)    
 11  );

Table TODO_COMMENT created.

SQL> 
SQL> CREATE TABLE CATEGORY (
  2    ID NUMBER(10),
  3    NAME VARCHAR2(300),
  4    PRIORITY NUMBER(10),
  5    COLOR VARCHAR2(50),  
  6    CREATED_AT TIMESTAMP,
  7    UPDATED_AT TIMESTAMP,
  8    CONSTRAINT CATEGORY_PK PRIMARY KEY (ID)  
  9  );

Table CATEGORY created.

SQL> 
SQL> 
SQL> CREATE TABLE TODO_CATEGORY (
  2    ID NUMBER(10),
  3    IS_PLANNED CHAR(1),
  4    CATEGORY_ID NUMBER(10),
  5    TODO_ID NUMBER(10),  
  6    CREATED_AT TIMESTAMP,
  7    UPDATED_AT TIMESTAMP,
  8    CONSTRAINT TODO_CATEGORY_CATEGORY_ID_FK FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORY (ID),
  9    CONSTRAINT TODO_ID_TODO_CATEGORY_FK FOREIGN KEY (TODO_ID) REFERENCES TODO (ID)      
 10  );

Table TODO_CATEGORY created.

SQL> 
SQL> 
SQL> DESCRIBE TODO_USER;
Name       Null?    Type          
---------- -------- ------------- 
ID         NOT NULL NUMBER(10)    
NAME                VARCHAR2(50)  
EMAIL               VARCHAR2(150) 
CREATED_AT          TIMESTAMP(6)  
UPDATED_AT          TIMESTAMP(6)  
SQL> DESCRIBE TODO_COMMENT;
Name       Null?    Type          
---------- -------- ------------- 
ID         NOT NULL NUMBER(10)    
BODY                VARCHAR2(300) 
CREATED_AT          TIMESTAMP(6)  
UPDATED_AT          TIMESTAMP(6)  
USER_ID             NUMBER(10)    
TODO_ID             NUMBER(10)    
SQL> DESCRIBE TODO;
Name          Null?    Type          
------------- -------- ------------- 
ID            NOT NULL NUMBER(10)    
TITLE                  VARCHAR2(150) 
DESCRIPTION            VARCHAR2(300) 
DEADLINE               TIMESTAMP(6)  
NOTIFICATIONS          TIMESTAMP(6)  
CREATED_AT             TIMESTAMP(6)  
UPDATED_AT             TIMESTAMP(6)  
USER_ID                NUMBER(10)    
SQL> DESCRIBE CATEGORY;
Name       Null?    Type          
---------- -------- ------------- 
ID         NOT NULL NUMBER(10)    
NAME                VARCHAR2(300) 
PRIORITY            NUMBER(10)    
COLOR               VARCHAR2(50)  
CREATED_AT          TIMESTAMP(6)  
UPDATED_AT          TIMESTAMP(6)  
SQL> DESCRIBE TODO_CATEGORY;
Name        Null? Type         
----------- ----- ------------ 
ID                NUMBER(10)   
IS_PLANNED        CHAR(1)      
CATEGORY_ID       NUMBER(10)   
TODO_ID           NUMBER(10)   
CREATED_AT        TIMESTAMP(6) 
UPDATED_AT        TIMESTAMP(6) 
SQL> 
SQL> CREATE INDEX TODO_USER_NAME_FK_IDX ON TODO_USER
  2   (ID,NAME);

Index TODO_USER_NAME_FK_IDX created.

SQL> 
SQL> CREATE INDEX TODO_COMMENT_TEXT_FK_IDX ON TODO_COMMENT
  2   (TODO_ID,USER_ID,BODY);

Index TODO_COMMENT_TEXT_FK_IDX created.

SQL> 
SQL> CREATE INDEX TODO_TITLE_FK_IDX ON TODO
  2   (ID,USER_ID,TITLE);

Index TODO_TITLE_FK_IDX created.

SQL> 
SQL> CREATE INDEX TODO_SUSPENSE_FK_IDX ON TODO
  2   (ID,USER_ID,TITLE,DEADLINE);

Index TODO_SUSPENSE_FK_IDX created.

SQL> 
SQL> CREATE INDEX TODO_DETAILS_FK_IDX ON TODO
  2   (ID,USER_ID,TITLE,DESCRIPTION,DEADLINE);

Index TODO_DETAILS_FK_IDX created.

SQL> 
SQL> CREATE OR REPLACE VIEW VIRTUAL_TODO_CATEGORIES AS
  2  SELECT 
  3    C.ID, 
  4    C.NAME, 
  5    C.PRIORITY, 
  6    C.COLOR, 
  7    TC.IS_PLANNED
  8  FROM CATEGORY C INNER JOIN TODO_CATEGORY TC
  9  ON C.ID=TC.CATEGORY_ID;

View VIRTUAL_TODO_CATEGORIES created.

SQL> 
SQL> CREATE OR REPLACE VIEW VIRTUAL_TODO_ITEMS AS
  2  SELECT 
  3    T.ID, 
  4    T.TITLE, 
  5    T.DESCRIPTION, 
  6    T.DEADLINE, 
  7    T.NOTIFICATIONS, 
  8    T.USER_ID, 
  9    U.NAME
 10  FROM TODO T INNER JOIN TODO_USER U
 11  ON T.USER_ID=U.ID;

View VIRTUAL_TODO_ITEMS created.

SQL> 
SQL> CREATE OR REPLACE VIEW VIEW_TODO_ITEMS AS
  2  SELECT 
  3    ID, 
  4    TITLE, 
  5    DESCRIPTION, 
  6    DEADLINE, 
  7    NOTIFICATIONS, 
  8    USER_ID 
  9  FROM TODO;

View VIEW_TODO_ITEMS created.

SQL> 
SQL> CREATE OR REPLACE VIEW VIEW_TODO_COMMENTS AS
  2  SELECT 
  3    ID, 
  4    BODY, 
  5    USER_ID, 
  6    TODO_ID
  7  FROM TODO_COMMENT;

View VIEW_TODO_COMMENTS created.

SQL> 
SQL> DESCRIBE VIRTUAL_TODO_CATEGORIES;
Name       Null?    Type          
---------- -------- ------------- 
ID         NOT NULL NUMBER(10)    
NAME                VARCHAR2(300) 
PRIORITY            NUMBER(10)    
COLOR               VARCHAR2(50)  
IS_PLANNED          CHAR(1)       
SQL> DESCRIBE VIRTUAL_TODO_ITEMS;
Name          Null?    Type          
------------- -------- ------------- 
ID            NOT NULL NUMBER(10)    
TITLE                  VARCHAR2(150) 
DESCRIPTION            VARCHAR2(300) 
DEADLINE               TIMESTAMP(6)  
NOTIFICATIONS          TIMESTAMP(6)  
USER_ID                NUMBER(10)    
NAME                   VARCHAR2(50)  
SQL> DESCRIBE VIEW_TODO_ITEMS;
Name          Null?    Type          
------------- -------- ------------- 
ID            NOT NULL NUMBER(10)    
TITLE                  VARCHAR2(150) 
DESCRIPTION            VARCHAR2(300) 
DEADLINE               TIMESTAMP(6)  
NOTIFICATIONS          TIMESTAMP(6)  
USER_ID                NUMBER(10)    
SQL> DESCRIBE VIEW_TODO_COMMENTS;
Name    Null?    Type          
------- -------- ------------- 
ID      NOT NULL NUMBER(10)    
BODY             VARCHAR2(300) 
USER_ID          NUMBER(10)    
TODO_ID          NUMBER(10)    
SQL> 
SQL> CREATE SEQUENCE TODO_USER_ID_SEQ
  2   INCREMENT BY 1
  3   START WITH 10000
  4  /

Sequence TODO_USER_ID_SEQ created.

SQL> 
SQL> CREATE SEQUENCE TODO_ID_SEQ
  2   INCREMENT BY 1
  3   START WITH 1
  4  /

Sequence TODO_ID_SEQ created.

SQL> 
SQL> CREATE SEQUENCE TODO_COMMENT_ID_SEQ
  2   INCREMENT BY 1
  3   START WITH 100
  4  /

Sequence TODO_COMMENT_ID_SEQ created.

SQL> 
SQL> CREATE SEQUENCE CATEGORY_ID_SEQ
  2   INCREMENT BY 10
  3   START WITH 50
  4  /

Sequence CATEGORY_ID_SEQ created.

SQL> 
SQL> CREATE SEQUENCE TODO_CATEGORY_ID_SEQ
  2   INCREMENT BY 1
  3   START WITH 1000
  4  /

Sequence TODO_CATEGORY_ID_SEQ created.

SQL> 
SQL> CREATE OR REPLACE TRIGGER TODO_USER_ID_TRIGGER
  2  BEFORE INSERT OR UPDATE ON TODO_USER 
  3  FOR EACH ROW
  4  WHEN (NEW.ID IS NULL)
  5  BEGIN
  6    SELECT TODO_USER_ID_SEQ.NEXTVAL
  7    INTO   :NEW.ID
  8    FROM   DUAL;
  9  
 10    IF INSERTING THEN
 11      IF :NEW.CREATED_AT IS NULL THEN :NEW.CREATED_AT := SYSTIMESTAMP - INTERVAL '90' DAY; END IF;
 12    END IF;
 13  
 14    IF INSERTING OR UPDATING THEN
 15      IF :NEW.UPDATED_AT IS NULL THEN :NEW.UPDATED_AT := SYSTIMESTAMP - INTERVAL '20' DAY; END IF;
 16    END IF;  
 17  END;
 18  /

Trigger TODO_USER_ID_TRIGGER compiled

SQL> 
SQL> CREATE OR REPLACE TRIGGER TODO_ID_TRIGGER
  2  BEFORE INSERT OR UPDATE ON TODO 
  3  FOR EACH ROW
  4  WHEN (NEW.ID IS NULL)
  5  BEGIN
  6    SELECT TODO_ID_SEQ.NEXTVAL
  7    INTO   :NEW.ID
  8    FROM   DUAL;
  9  
 10    IF INSERTING THEN
 11      IF :NEW.CREATED_AT IS NULL THEN :NEW.CREATED_AT := SYSTIMESTAMP - INTERVAL '90' DAY; END IF;
 12    END IF;
 13  
 14    IF INSERTING OR UPDATING THEN
 15      IF :NEW.UPDATED_AT IS NULL THEN :NEW.UPDATED_AT := SYSTIMESTAMP - INTERVAL '20' DAY; END IF;
 16    END IF;  
 17  END;
 18  /

Trigger TODO_ID_TRIGGER compiled

SQL> 
SQL> CREATE OR REPLACE TRIGGER TODO_COMMENT_ID_TRIGGER
  2  BEFORE INSERT OR UPDATE ON TODO_COMMENT 
  3  FOR EACH ROW
  4  WHEN (NEW.ID IS NULL)
  5  BEGIN
  6    SELECT TODO_COMMENT_ID_SEQ.NEXTVAL
  7    INTO   :NEW.ID
  8    FROM   DUAL;
  9  
 10    IF INSERTING THEN
 11      IF :NEW.CREATED_AT IS NULL THEN :NEW.CREATED_AT := SYSTIMESTAMP - INTERVAL '90' DAY; END IF;
 12    END IF;
 13  
 14    IF INSERTING OR UPDATING THEN
 15      IF :NEW.UPDATED_AT IS NULL THEN :NEW.UPDATED_AT := SYSTIMESTAMP - INTERVAL '20' DAY; END IF;
 16    END IF;  
 17  END;
 18  /

Trigger TODO_COMMENT_ID_TRIGGER compiled

SQL> 
SQL> CREATE OR REPLACE TRIGGER CATEGORY_ID_TRIGGER
  2  BEFORE INSERT OR UPDATE ON CATEGORY
  3  FOR EACH ROW
  4  WHEN (NEW.ID IS NULL)
  5  BEGIN
  6    SELECT CATEGORY_ID_SEQ.NEXTVAL
  7    INTO   :NEW.ID
  8    FROM   DUAL;
  9  
 10    IF INSERTING THEN
 11      IF :NEW.CREATED_AT IS NULL THEN :NEW.CREATED_AT := SYSTIMESTAMP - INTERVAL '90' DAY; END IF;
 12    END IF;
 13  
 14    IF INSERTING OR UPDATING THEN
 15      IF :NEW.UPDATED_AT IS NULL THEN :NEW.UPDATED_AT := SYSTIMESTAMP - INTERVAL '20' DAY; END IF;
 16    END IF;  
 17  END;
 18  /

Trigger CATEGORY_ID_TRIGGER compiled

SQL> 
SQL> CREATE OR REPLACE TRIGGER TODO_CATEGORY_ID_TRIGGER
  2  BEFORE INSERT OR UPDATE ON TODO_CATEGORY
  3  FOR EACH ROW
  4  WHEN (NEW.ID IS NULL)
  5  BEGIN
  6    SELECT TODO_CATEGORY_ID_SEQ.NEXTVAL
  7    INTO   :NEW.ID
  8    FROM   DUAL;
  9  
 10    IF INSERTING THEN
 11      IF :NEW.CREATED_AT IS NULL THEN :NEW.CREATED_AT := SYSTIMESTAMP - INTERVAL '90' DAY; END IF;
 12    END IF;
 13  
 14    IF INSERTING OR UPDATING THEN
 15      IF :NEW.UPDATED_AT IS NULL THEN :NEW.UPDATED_AT := SYSTIMESTAMP - INTERVAL '20' DAY; END IF;
 16    END IF;  
 17  END;
 18  /

Trigger TODO_CATEGORY_ID_TRIGGER compiled

